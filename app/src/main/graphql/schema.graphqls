type ActivitiesPaginated {
  cursor: String

  data: [ActivityModel!]!

  hasMore: Boolean!

  totalCount: Int!
}

type ActivityModel {
  call: CallModel

  comment: CommentModel

  createdAt: DateTime!

  email: EmailModel

  event: EventModel

  id: Int!

  initiator: PersonModel

  lead: FLeadModel

  leadId: Int

  message: MessageModel

  receiver: PersonModel

  systemActivity: SystemActivityModel

  type: ActivityTypeModel!

  typeId: Int!

  updateActivity: UpdateActivityModel

  updatedAt: DateTime!
}

type ActivityTypeModel {
  id: Int!

  title: String!
}

type AdSourceModel {
  id: Int!

  title: String!
}

type AdTagModel {
  category: TagCategoryModel!

  conditional: Boolean!

  field: String

  id: Int!

  key: String!

  value: String!
}

input ArrayConstraintsInput {
  default: [String!]

  max: Int

  min: Int
}

type ArrayConstraintsModel {
  default: [String!]

  max: Int

  min: Int
}

input AuthenticateEntityInput {
  cloudMessagesToken: String

  email: String!

  password: String!
}

type AuthenticatedEntity {
  accessToken: String!

  entityType: EntityTypeModel!

  refreshToken: String!

  user: UserModel
}

"""
The `Boolean` scalar type represents `true` or `false`.
"""
scalar Boolean

input BooleanConstraintsInput {
  default: Boolean
}

type BooleanConstraintsModel {
  default: Boolean
}

enum BusinessProcessEntity {
  CHAT

  DEAL

  DEPARTMENT

  LEAD

  OTHER

  POOL

  USER

  WEBHOOK
}

type BusinessProcessModel {
  createdAt: DateTime!

  description: String

  entity: BusinessProcessEntity!

  id: Int!

  permissions: [PermissionModel!]

  schema: [KeyedIndicatorSchemaFieldModel!]

  title: String!

  updatedAt: DateTime!
}

type BusinessProcessPermissionModel {
  groupTitle: String!

  list: [BusinessProcessPermissionValueModel!]!
}

type BusinessProcessPermissionValueModel {
  businessProcess: BusinessProcessModel!

  value: Boolean!
}

type CallModel {
  callState: CallStateModel!

  callType: CallTypeModel!

  createdAt: DateTime!

  duration: Int

  endedAt: DateTime

  id: Int!

  initiatedPhone: String

  leadId: Int

  owner: PersonModel

  phone: String

  recipientPhone: String

  recordingFile: FileModel

  startedAt: DateTime

  subtitle: ContactSubtitleModel

  title: String!
}

type CallStateModel {
  color: String!

  id: Int!

  title: String!
}

type CallTypeModel {
  icon: String!

  id: Int!

  title: String!
}

type CallsPaginated {
  cursor: String

  data: [CallModel!]!

  hasMore: Boolean!

  totalCount: Int!
}

type ChannelSourceModel {
  id: Int!

  title: String!
}

enum ChatCategory {
  channel

  group

  private
}

type ChatModel {
  createdAt: DateTime!

  id: Int!

  lastMessage: MessageModel

  lastMessageId: Int

  leadId: Int

  permissions: [ChatPermissionModel!]!

  photo: String!

  subtitle: ContactSubtitleModel

  title: String!

  type: ChatTypeModel!

  unreadMessagesCount: Int!
}

type ChatParticipantModel {
  avatar: String!

  color: String!

  displayName: String!

  id: Int!

  properties: [String!]

  subtitle: ContactSubtitleModel
}

type ChatPermissionModel {
  id: String!

  title: String!
}

type ChatTypeModel {
  backgroundColor: String!

  category: ChatCategory!

  icon: String!

  id: Int!

  permissions: [ChatPermissionModel!]!

  title: String!
}

type CityModel {
  country: CountryModel!

  countryId: Int!

  id: Int!

  offset: String!

  offsetMs: Int!

  timezone: String!

  title: String!
}

type ColorModel {
  id: Int!

  main: String!

  secondary: String

  title: String!
}

type CommentModel {
  id: Int!

  text: String!
}

type CommunityModel {
  id: Int!

  title: String!
}

type CompanyTypeModel {
  id: Int!

  title: String!
}

type ContactCallMethod {
  callType: CallTypeModel!

  callsCount: Int!
}

type ContactChatMethod {
  chatId: Int

  chatType: ChatTypeModel!

  messagesCount: Int!
}

type ContactCommunicationMethod {
  calls: [ContactCallMethod!]!

  chats: [ContactChatMethod!]!

  contact: ContactSubtitleModel!
}

input ContactCommunicationMethodsInput {
  entityId: Int!

  leadId: Int
}

"""
Provide only one of the fields
"""
input ContactDataInput {
  email: String

  phone: String

  telegramId: String

  telegramUsername: String
}

type ContactModel {
  createdAt: DateTime!

  editable: Boolean!

  emailContact: EmailContactModel

  id: Int!

  phoneContact: PhoneContactModel

  sessionContact: SessionContactModel

  type: ContactTypeModel!

  typeId: Int!

  updatedAt: DateTime!
}

type ContactSubtitleModel {
  color: String!

  id: Int!

  phone: String

  text: String!
}

type ContactTypeModel {
  id: Int!

  title: String!
}

type CountryModel {
  adWordsCode: Int

  emoji: String

  id: Int!

  phoneCode: String!

  shortCode1: String!

  shortCode2: String!

  title: String!
}

input CreateLeadInput {
  areaSizeId: Int

  bedroomsId: Int

  birthDate: DateTime

  budget: Float

  cityId: Int

  communityIds: [Int!]

  contacts: [ContactDataInput!]!

  countryId: Int

  firstName: String!

  intentionId: Int!

  languageIds: [Int!]!

  lastName: String

  leadSourceId: Int

  nationalityId: Int

  projectIds: [Int!]

  propertyTypeId: Int

  secondName: String
}

input CreateUserInput {
  avatarId: Int

  bitrixId: Int

  email: String!

  firstName: String!

  lastName: String!

  password: String!

  phone: String!

  secondName: String

  telegramId: String

  telegramUsername: String
}

input DateConstraintsInput {
  default: DateTime
}

type DateConstraintsModel {
  default: DateTime
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type DepartmentModel {
  averageScore: Int!

  children: [DepartmentModel!]!

  createdAt: DateTime!

  description: String

  details: String!

  headUser: FUserModel

  id: Int!

  members(params: PaginationInput! = {

  }
  ): FUsersPaginated!

  parent: DepartmentModel

  path: [String!]!

  title: String!

  updatedAt: DateTime!
}

type DepartmentTagModel {
  id: Int!

  title: String!
}

enum EmailBox {
  anywhere

  category_forums

  category_personal

  category_promotions

  category_social

  category_updates

  draft

  important

  inbox

  scheduled

  sent

  snoozed

  spam

  starred

  trash

  unread
}

type EmailContactModel {
  contactId: Int!

  email: String!

  title: String!
}

type EmailDraftModel {
  attachments: [FileModel!]

  bcc: [String!]

  body: String!

  cc: [String!]

  createdAt: DateTime!

  id: Int!

  replyTo: String

  subject: String!

  threadId: Int

  to: [String!]

  updatedAt: DateTime!
}

type EmailModel {
  attachments: [FileModel!]

  bcc: [EmailUser!]

  cc: [EmailUser!]

  createdAt: DateTime!

  from: EmailUser!

  fromMe: Boolean!

  html: String

  id: Int!

  mailBox: [EmailBox!]!

  messageId: String!

  read: Boolean!

  replyTo: String

  subject: String!

  text: String

  threadId: Int

  to: [EmailUser!]
}

type EmailThreadModel {
  emailDraft: EmailDraftModel

  emails(pagination: PaginationInput! = {

  }
  ): EmailsPaginated!

  id: Int!

  lastEmail: EmailModel

  subject: String!
}

type EmailUser {
  address: String!

  person: PersonModel!
}

type EmailsPaginated {
  cursor: String

  data: [EmailModel!]!

  hasMore: Boolean!

  totalCount: Int!
}

type EntityTypeModel {
  id: Int!

  title: String!
}

type EventAlertTypeModel {
  id: Int!

  title: String!
}

type EventModel {
  alert: EventAlertTypeModel!

  createdAt: DateTime!

  eventDate: DateTime!

  eventEndDate: DateTime

  followUp: FollowUpEventModel

  id: Int!

  lead: FLeadModel

  meeting: MeetingEventModel

  notes: String

  title: String!

  type: EventTypeModel!

  typeId: Int!

  updatedAt: DateTime!

  user: FUserModel!
}

type EventTypeModel {
  id: Int!

  title: String!
}

type FContactsList {
  data: [ContactModel!]!
}

type FLeadModel {
  data: LeadModel!
}

type FLeadsPaginated {
  cursor: String

  data: [LeadModel!]!

  hasMore: Boolean!

  totalCount: Int!
}

type FUserModel {
  data: UserModel!
}

type FUsersList {
  data: [UserModel!]!
}

type FUsersPaginated {
  cursor: String

  data: [UserModel!]!

  hasMore: Boolean!

  totalCount: Int!
}

input FetchLeadInput {
  leadId: Int!
}

input FetchLeadsInput {
  adSourceIds: [Int!]

  ascending: Boolean! = false

  channelSourceIds: [Int!]

  cityIds: [Int!]

  communityIds: [Int!]

  countryIds: [Int!]

  dateRangeForEvents: Boolean

  from: DateTime

  intentionIds: [Int!]

  languageIds: [Int!]

  nationalityIds: [Int!]

  periodId: Int

  presetId: Int

  projectIds: [Int!]

  propertyTypeIds: [Int!]

  query: String

  responsibleAgentId: Int

  seenLeads: Boolean

  statusIds: [Int!]

  to: DateTime

  unseenLeads: Boolean

  webSourceIds: [Int!]
}

type FieldAccessModel {
  permissions: FieldPermissionModel!

  title: String!
}

type FieldPermissionModel {
  read: PermissionScope!

  update: PermissionScope!
}

type FileModel {
  createdAt: DateTime!

  id: Int!

  mimeType: String!

  name: String!

  path: String!

  resolution: String

  size: Int!

  thumbnail: String

  updatedAt: DateTime!
}

"""
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
"""
scalar Float

type FollowUpEventModel {
  allDay: Boolean!

  eventId: Int!

  type: FollowUpTypeModel!

  typeId: Int!
}

type FollowUpTypeModel {
  color: String!

  id: Int!

  title: String!
}

input IndicatorSelectConstraintsInput {
  default: JSON

  indicator: PredefinedTableRelation

  options: [SelectConstraintsOptionInput!]

  selectsCount: SelectCountMinMaxInput
}

type IndicatorSelectConstraintsModel {
  default: JSON

  indicator: PredefinedTableRelation

  options: [SelectConstraintsOptionModel!]

  selectsCount: SelectCountMinMaxModel
}

"""
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
"""
scalar Int

type InterfacePermissionModel {
  groupTitle: String!

  list: [InterfacePermissionValueModel!]!
}

type InterfacePermissionValueModel {
  key: String!

  title: String!

  value: Boolean!
}

enum ItemType {
  car

  furniture

  property
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

type KeyedIndicatorSchemaFieldModel {
  arrayConstraints: ArrayConstraintsModel

  booleanConstraints: BooleanConstraintsModel

  dateConstraints: DateConstraintsModel

  deprecationReason: String

  disabled: Boolean

  key: String!

  numberConstraints: NumberConstraintsModel

  placeholder: String

  required: Boolean

  selectConstraints: IndicatorSelectConstraintsModel

  stringConstraints: StringConstraintsModel

  title: String!

  type: RelationFieldType!
}

type LanguageModel {
  countries: [CountryModel!]

  id: Int!

  shortCode: String!

  title: String!
}

type LeadIntentionModel {
  id: Int!

  title: String!
}

type LeadModel {
  adSource: AdSourceModel

  adTags: [AdTagModel!]

  areaSize: PropertyAreaSizeModel

  avatar: FileModel

  bedrooms: PropertyRoomModel

  birthDate: DateTime

  budget: Float

  channelSource: ChannelSourceModel

  city: CityModel

  color: ColorModel!

  communities: [CommunityModel!]

  contacts: FContactsList

  country: CountryModel

  createdAt: DateTime

  displayName: String

  displaySource: String

  firstName: String

  id: Int!

  intention: LeadIntentionModel

  itemType: ItemType!

  languages: [LanguageModel!]

  lastName: String

  nationality: NationalityModel

  personId: Int!

  projects: [ProjectModel!]

  propertyType: PropertyTypeModel

  quality: Int

  responsibleAgent: FUserModel

  secondName: String

  seen: Boolean

  source: LeadSourceModel

  sourceDetails: String

  status: LeadStatusModel

  updatedAt: DateTime

  webSource: WebSourceModel
}

type LeadSourceModel {
  id: Int!

  title: String!
}

type LeadStatusModel {
  backgroundColor: String!

  color: String!

  createdAt: DateTime!

  id: Int!

  legacyColor: String!

  step: Int!

  stepsCount: Int!

  title: String!

  updatedAt: DateTime!
}

type LocationMessage {
  latitude: Float!

  longitude: Float!
}

type MeetingEventModel {
  acceptedInvites: FUsersList!

  address: String!

  emailInvites: [String!]!

  eventId: Int!

  latitude: Float

  longitude: Float

  pendingInvites: FUsersList!

  rejectedInvites: FUsersList!

  showAsBusy: Boolean!
}

type MessageModel {
  chat: ChatModel!

  chatId: Int!

  contacts: [String!]

  createdAt: DateTime!

  from: ChatParticipantModel

  fromMe: Boolean!

  id: Int!

  location: LocationMessage

  media: FileModel

  read: Boolean!

  reply: MessageModel

  score: Int

  text: String

  textActions: JSON

  type: MessageType!

  updatedAt: DateTime!
}

enum MessageType {
  animation

  audio

  contact

  document

  location

  photo

  service

  sticker

  text

  video

  voice
}

type Mutation {
  authenticate(params: AuthenticateEntityInput!): AuthenticatedEntity!

  createLead(params: CreateLeadInput!): FLeadModel!

  createUser(params: CreateUserInput!): FUserModel!

  logOut: Boolean!

  updateLead(params: UpdateLeadInput!): FLeadModel!

  updateUser(params: UpdateUserInput!): FUserModel!
}

type NationalityModel {
  country: CountryModel

  countryId: Int

  id: Int!

  title: String!
}

input NumberConstraintsInput {
  default: Int

  max: Int

  min: Int
}

type NumberConstraintsModel {
  default: Int

  max: Int

  min: Int
}

input PaginationInput {
  cursor: String

  take: Int = 10
}

type PermissionModel {
  action: String

  businessProcessId: Int

  createdAt: DateTime!

  id: Int!

  interfaceId: Int

  properties: JSON

  role: RoleModel!

  roleId: Int!

  scope: PermissionScope!

  subject: String

  type: PermissionType!

  updatedAt: DateTime!
}

enum PermissionScope {
  DISABLED

  LEVEL1

  LEVEL2

  LEVEL3

  LEVEL4
}

enum PermissionType {
  BUSINESS_PROCESS

  INTERFACE

  TABLE
}

type PersonModel {
  avatar: String!

  birthDate: DateTime

  calls(pagination: PaginationInput! = {

  }
  ): CallsPaginated!

  contacts: [ContactModel!]!

  description: JSONObject!

  displayName: String!

  firstName: String

  id: Int!

  isUser: Boolean!

  lastName: String

  leads: [LeadModel!]!

  secondName: String
}

type PhoneContactModel {
  color: String!

  contactId: Int!

  phone: String!

  telegramId: String

  telegramUsername: String

  title: String!
}

type PieChartModel {
  data: JSON!

  title: String!
}

type PoolModel {
  assigned: Boolean!

  chat: ChatModel!

  closeTime: DateTime

  createdAt: DateTime!

  id: Int!

  lead: FLeadModel!

  requested: Boolean!

  seen: Boolean!

  updatedAt: DateTime!
}

enum PredefinedTableRelation {
  DEAL

  DEPARTMENT

  LEAD

  USER
}

type ProjectModel {
  id: Int!

  title: String!
}

type PropertyAreaSizeModel {
  id: Int!

  title: String!
}

type PropertyRoomModel {
  id: Int!

  title: String!
}

type PropertyTypeModel {
  id: Int!

  title: String!
}

type Query {
  cities(countryId: Int!): [CityModel!]!

  fetchAdSources: [AdSourceModel!]!

  fetchChannelSources: [ChannelSourceModel!]!

  fetchCommunities: [CommunityModel!]!

  fetchCompanyTypes: [CompanyTypeModel!]!

  fetchContactCommunicationMethods(params: ContactCommunicationMethodsInput!): [ContactCommunicationMethod!]!

  fetchCountries: [CountryModel!]!

  fetchEntityTypes: [EntityTypeModel!]!

  fetchLead(params: FetchLeadInput!): FLeadModel

  fetchLeadIntentionTypes: [LeadIntentionModel!]!

  fetchLeadSources: [LeadSourceModel!]!

  fetchLeadStatusTypes: [LeadStatusModel!]!

  fetchLeads(pagination: PaginationInput! = {

  }
  , params: FetchLeadsInput! = {

  }
  ): FLeadsPaginated!

  fetchProjects: [ProjectModel!]!

  fetchPropertyTypes: [PropertyTypeModel!]!

  fetchWebSources: [WebSourceModel!]!

  languages: [LanguageModel!]!

  nationalities: [NationalityModel!]!

  propertyAreaSizes: [PropertyAreaSizeModel!]!

  propertyRooms: [PropertyRoomModel!]!

  queryCities(query: String!): [TagQueryModel!]!
}

enum ReferenceType {
  HAS_MANY

  HAS_ONE

  MANY_TO_MANY

  MANY_TO_ONE

  ONE_TO_MANY

  ONE_TO_ONE
}

input RelationConstraintsInput {
  default: [Int!]

  onDelete: RelationMutationSideEffect!

  referenceType: ReferenceType!

  tableInfo: TableInfoInput!

  unique: Boolean!
}

type RelationConstraintsModel {
  default: [Int!]

  onDelete: RelationMutationSideEffect!

  referenceType: ReferenceType!

  tableInfo: TableInfoModel!

  unique: Boolean!
}

type RelationConstraintsOptionModel {
  title: String!

  value: Int!
}

enum RelationFieldType {
  array

  boolean

  date

  number

  relation

  select

  string
}

enum RelationMutationSideEffect {
  CASCADE

  PROHIBIT

  SET_NULL
}

type RoleModel {
  businessProcesses: [BusinessProcessPermissionModel!]!

  createdAt: DateTime!

  description: String

  id: Int!

  interfaces: [InterfacePermissionModel!]!

  permissions: [PermissionModel!]

  tables: [TableAccessModel!]!

  title: String!

  updatedAt: DateTime!

  users(pagination: PaginationInput! = {

  }
  , params: UsersParamsInput = {

  }
  ): FUsersPaginated!
}

type SearchPeriodModel {
  id: Int!

  title: String!

  value: String!
}

input SelectConstraintsInput {
  default: JSON

  options: [SelectConstraintsOptionInput!]

  selectsCount: SelectCountMinMaxInput
}

type SelectConstraintsModel {
  default: JSON

  options: [SelectConstraintsOptionModel!]

  selectsCount: SelectCountMinMaxModel
}

input SelectConstraintsOptionInput {
  title: String!

  value: JSON!
}

type SelectConstraintsOptionModel {
  title: String!

  value: JSON!
}

input SelectCountMinMaxInput {
  max: Int

  min: Int
}

type SelectCountMinMaxModel {
  max: Int

  min: Int
}

type SessionContactModel {
  contactId: Int!

  sessionId: String!
}

"""
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
"""
scalar String

input StringConstraintsInput {
  default: String

  max: Int

  min: Int
}

type StringConstraintsModel {
  default: String

  max: Int

  min: Int
}

type SystemActivityModel {
  id: Int!

  title: String!
}

type TableAccessModel {
  fields: [FieldAccessModel!]!

  permissions: TablePermissionModel!

  title: String!
}

input TableInfoInput {
  connectionField: TableSideFieldInput!

  onDelete: RelationMutationSideEffect!

  table: String!
}

type TableInfoModel {
  connectionField: TableSideFieldModel!

  onDelete: RelationMutationSideEffect!

  table: String!
}

type TablePermissionModel {
  create: PermissionScope!

  delete: PermissionScope!

  export: PermissionScope!

  import: PermissionScope!

  read: PermissionScope!

  update: PermissionScope!
}

input TableSideFieldInput {
  title: String!
}

type TableSideFieldModel {
  title: String!
}

type TagCategoryModel {
  color: String

  combineGroups: Boolean!

  createdAt: DateTime!

  id: Int!

  tags: TagsPaginated

  title: String!

  updatedAt: DateTime!
}

type TagModel {
  adSource: AdSourceModel

  adTag: AdTagModel

  category: TagCategoryModel!

  channelSource: ChannelSourceModel

  city: CityModel

  community: CommunityModel

  country: CountryModel

  createdAt: DateTime!

  department: DepartmentTagModel

  id: Int!

  language: LanguageModel

  leadIntention: LeadIntentionModel

  leadSource: LeadSourceModel

  nationality: NationalityModel

  project: ProjectModel

  propertyAreaSize: PropertyAreaSizeModel

  propertyRoom: PropertyRoomModel

  propertyType: PropertyTypeModel

  source: LeadSourceModel

  title: String!

  type: TagType!

  updatedAt: DateTime!

  webSource: WebSourceModel
}

type TagQueryModel {
  _formatted: TagQueryModel!

  categoryTitle: String!

  details: JSON!

  id: Int!

  tagId: Int!

  title: String!

  type: TagType!
}

enum TagType {
  AD_SOURCE

  AD_TAG

  CHANNEL_SOURCE

  CITY

  COMMUNITY

  COUNTRY

  CUSTOM

  DEPARTMENT

  LANGUAGE

  LEAD_INTENTION

  LEAD_SOURCE

  NATIONALITY

  PROJECT

  PROPERTY_AREA_SIZE

  PROPERTY_ROOM

  PROPERTY_TYPE

  WEB_SOURCE
}

type TagsPaginated {
  cursor: String

  data: [TagModel!]!

  hasMore: Boolean!

  totalCount: Int!
}

type UpdateActivityData {
  data: String!

  ids: [Int!]!
}

type UpdateActivityModel {
  after: UpdateActivityData

  before: UpdateActivityData

  createdAt: DateTime!

  field: String!

  id: Int!

  isPrimitive: Boolean!

  model: String!
}

input UpdateLeadInput {
  areaSizeId: Int

  bedroomsId: Int

  birthDate: DateTime

  budget: Float

  cityId: Int

  communityIds: [Int!]

  countryId: Int

  firstName: String

  intentionId: Int

  languageIds: [Int!]

  lastName: String

  leadId: Int!

  leadSourceId: Int

  nationalityId: Int

  projectIds: [Int!]

  propertyTypeId: Int

  responsibleAgentId: Int

  secondName: String

  seen: Boolean

  statusId: Int

  statusReason: String
}

input UpdateUserInput {
  avatarId: Int

  bitrixId: Int

  firstName: String

  lastName: String

  secondName: String

  status: UserStatus

  userId: Int!
}

type UserModel {
  activities(pagination: PaginationInput! = {

  }
  ): ActivitiesPaginated

  avatar: FileModel

  birthDate: DateTime

  bitrixId: Int!

  createdAt: DateTime!

  daysWithoutDeal: Int

  departments: [DepartmentModel!]

  displayName: String!

  emailContact: EmailContactModel

  firstName: String

  id: Int!

  lastName: String

  leads(pagination: PaginationInput! = {

  }
  ): FLeadsPaginated

  leadsCount: Int

  needsPasswordChange: Boolean!

  phoneContact: PhoneContactModel

  roles: [RoleModel!]

  score: Float

  secondName: String

  secondaryStatus: [UserStatus!]!

  status: UserStatus!

  statusTitle: String!

  tags: [TagModel!]

  updatedAt: DateTime!
}

enum UserStatus {
  DEACTIVATED

  FORCE_OFFLINE

  MEETING

  OFFLINE

  ONLINE

  OVERDUE
}

input UsersParamsInput {
  query: String

  statuses: [UserStatus!]
}

type VisitedPageModel {
  bedrooms: Int!

  community: String!

  price: Int!

  propertyType: String!

  url: String!

  visitedDate: Int!
}

type WebSourceModel {
  id: Int!

  title: String!

  url: String!
}

"""
A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.

In some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.
"""
type __Directive {
  name: String!

  description: String

  isRepeatable: Boolean!

  locations: [__DirectiveLocation!]!

  args(includeDeprecated: Boolean = false): [__InputValue!]!
}

"""
A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.
"""
enum __DirectiveLocation {
  """
  Location adjacent to a query operation.
  """
  QUERY

  """
  Location adjacent to a mutation operation.
  """
  MUTATION

  """
  Location adjacent to a subscription operation.
  """
  SUBSCRIPTION

  """
  Location adjacent to a field.
  """
  FIELD

  """
  Location adjacent to a fragment definition.
  """
  FRAGMENT_DEFINITION

  """
  Location adjacent to a fragment spread.
  """
  FRAGMENT_SPREAD

  """
  Location adjacent to an inline fragment.
  """
  INLINE_FRAGMENT

  """
  Location adjacent to a variable definition.
  """
  VARIABLE_DEFINITION

  """
  Location adjacent to a schema definition.
  """
  SCHEMA

  """
  Location adjacent to a scalar definition.
  """
  SCALAR

  """
  Location adjacent to an object type definition.
  """
  OBJECT

  """
  Location adjacent to a field definition.
  """
  FIELD_DEFINITION

  """
  Location adjacent to an argument definition.
  """
  ARGUMENT_DEFINITION

  """
  Location adjacent to an interface definition.
  """
  INTERFACE

  """
  Location adjacent to a union definition.
  """
  UNION

  """
  Location adjacent to an enum definition.
  """
  ENUM

  """
  Location adjacent to an enum value definition.
  """
  ENUM_VALUE

  """
  Location adjacent to an input object type definition.
  """
  INPUT_OBJECT

  """
  Location adjacent to an input object field definition.
  """
  INPUT_FIELD_DEFINITION
}

"""
One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.
"""
type __EnumValue {
  name: String!

  description: String

  isDeprecated: Boolean!

  deprecationReason: String
}

"""
Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.
"""
type __Field {
  name: String!

  description: String

  args(includeDeprecated: Boolean = false): [__InputValue!]!

  type: __Type!

  isDeprecated: Boolean!

  deprecationReason: String
}

"""
Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.
"""
type __InputValue {
  name: String!

  description: String

  type: __Type!

  """
  A GraphQL-formatted string representing the default value for this input value.
  """
  defaultValue: String

  isDeprecated: Boolean!

  deprecationReason: String
}

"""
A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.
"""
type __Schema {
  description: String

  """
  A list of all types supported by this server.
  """
  types: [__Type!]!

  """
  The type that query operations will be rooted at.
  """
  queryType: __Type!

  """
  If this server supports mutation, the type that mutation operations will be rooted at.
  """
  mutationType: __Type

  """
  If this server support subscription, the type that subscription operations will be rooted at.
  """
  subscriptionType: __Type

  """
  A list of all directives supported by this server.
  """
  directives: [__Directive!]!
}

"""
The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.

Depending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByURL`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.
"""
type __Type {
  kind: __TypeKind!

  name: String

  description: String

  specifiedByURL: String

  fields(includeDeprecated: Boolean = false): [__Field!]

  interfaces: [__Type!]

  possibleTypes: [__Type!]

  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]

  inputFields(includeDeprecated: Boolean = false): [__InputValue!]

  ofType: __Type
}

"""
An enum describing what kind of type a given `__Type` is.
"""
enum __TypeKind {
  """
  Indicates this type is a scalar.
  """
  SCALAR

  """
  Indicates this type is an object. `fields` and `interfaces` are valid fields.
  """
  OBJECT

  """
  Indicates this type is an interface. `fields`, `interfaces`, and `possibleTypes` are valid fields.
  """
  INTERFACE

  """
  Indicates this type is a union. `possibleTypes` is a valid field.
  """
  UNION

  """
  Indicates this type is an enum. `enumValues` is a valid field.
  """
  ENUM

  """
  Indicates this type is an input object. `inputFields` is a valid field.
  """
  INPUT_OBJECT

  """
  Indicates this type is a list. `ofType` is a valid field.
  """
  LIST

  """
  Indicates this type is a non-null. `ofType` is a valid field.
  """
  NON_NULL
}

"""
Marks an element of a GraphQL schema as no longer supported.
"""
directive @deprecated ("Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by [CommonMark](https:\/\/commonmark.org\/)." reason: String = "No longer supported") on ARGUMENT_DEFINITION|ENUM_VALUE|FIELD_DEFINITION|INPUT_FIELD_DEFINITION

"""
Directs the executor to include this field or fragment only when the `if` argument is true.
"""
directive @include ("Included when true." if: Boolean!) on FIELD|FRAGMENT_SPREAD|INLINE_FRAGMENT

"""
Directs the executor to skip this field or fragment when the `if` argument is true.
"""
directive @skip ("Skipped when true." if: Boolean!) on FIELD|FRAGMENT_SPREAD|INLINE_FRAGMENT

"""
Exposes a URL that specifies the behavior of this scalar.
"""
directive @specifiedBy ("The URL that specifies the behavior of this scalar." url: String!) on SCALAR

schema {
  query: Query
  mutation: Mutation
}
